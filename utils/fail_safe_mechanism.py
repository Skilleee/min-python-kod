import logging
import os
import subprocess
import time

# Konfigurera loggning
logging.basicConfig(filename="fail_safe_mechanism.log", level=logging.INFO)


def restart_bot():
    """
    Startar om AI-trading boten vid ov√§ntade krascher.
    """
    try:
        logging.warning("‚ö†Ô∏è Systemfel uppt√§ckt! F√∂rs√∂ker starta om boten...")
        os.system("python main.py &")  # Startar om boten i bakgrunden
        logging.info("‚úÖ Boten har startats om.")
    except Exception as e:
        logging.error(f"‚ùå Fel vid omstart av boten: {str(e)}")


def check_system_health():
    """
    Kontrollerar om AI-boten k√∂rs och vidtar √•tg√§rder vid avbrott.
    """
    try:
        process_name = "main.py"
        output = subprocess.getoutput(f"ps aux | grep {process_name} | grep -v grep")
        if process_name not in output:
            logging.warning("‚ö†Ô∏è Boten verkar ha kraschat! Startar om...")
            restart_bot()
        else:
            logging.info("‚úÖ AI-boten √§r ig√•ng och fungerar som f√∂rv√§ntat.")
    except Exception as e:
        logging.error(f"‚ùå Fel vid systemh√§lsokontroll: {str(e)}")


def monitor_bot(interval=60):
    """
    Kontinuerligt √∂vervakar AI-boten och √•terst√§ller den vid krasch.
    """
    while True:
        logging.info("üîç √ñvervakar AI-trading botens status...")
        check_system_health()
        time.sleep(interval)


# Exempelanrop
if __name__ == "__main__":
    logging.info("üöÄ Startar Fail-Safe Mechanism...")
    monitor_bot()
